[tox]
envlist = py27, py36, lint
skipsdist = True

[travis]
python = 2.7: py27
         3.6: py36, lint

[base]
deps = -rrequirements-cpu.txt
whitelist_externals = coverage

[testenv]
deps = {[base]deps}
commands =
    python -c "import tensorflow as tf; print(tf.__version__)"
    python -c "import niftynet; print(niftynet.__version__)"

    # download data
    wget -q https://www.dropbox.com/s/lioecnpv82r5n6e/example_volumes_v0_2.tar.gz
    tar -xzvf example_volumes_v0_2.tar.gz
    wget -q https://www.dropbox.com/s/5p5fdgy053tgmdj/testing_data_v0_3.tar.gz
    mkdir -p testing_data
    tar -xzvf testing_data_v0_3.tar.gz -C testing_data

    coverage erase
    # run only fast tests
    python net_download.py testing -r
    QUICKTEST=True coverage run -a --source . -m unittest discover -s "tests" -p "*_test.py"
    coverage report -m

    # run global config tests
    # These need to be run separately because NiftyNetGlobalConfig is a singleton, AND
    # its operations pertain to a global configuration file (~/.niftynet/config.ini).
    GLOBAL_CONFIG_TEST_gcs=True python -m unittest tests.niftynet_global_config_test
    GLOBAL_CONFIG_TEST_necfc=True python -m unittest tests.niftynet_global_config_test
    GLOBAL_CONFIG_TEST_ecfl=True python -m unittest tests.niftynet_global_config_test
    GLOBAL_CONFIG_TEST_icfbu=True python -m unittest tests.niftynet_global_config_test
    GLOBAL_CONFIG_TEST_nenhc=True python -m unittest tests.niftynet_global_config_test
    GLOBAL_CONFIG_TEST_enhnt=True python -m unittest tests.niftynet_global_config_test

    echo 'finished quick tests'


[testenv:lint]
deps =
    pylint
    {[base]deps}
basepython = python3.6
commands =
    pylint --rcfile=tests/pylintrc niftynet/engine
    pylint --rcfile=tests/pylintrc niftynet/io/image_*py
    pylint --rcfile=tests/pylintrc niftynet/utilities/user_parameters_*py
